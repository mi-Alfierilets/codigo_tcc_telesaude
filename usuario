from sqlalchemy import create_engine, Column, String, Integer,  from sqlalchemy import create_engine, Column, String, Integer, DateTime, Date, Boolean
from sqlalchemy import declarative_base
from sqlalchemy import Enum


engine= create_engine("sqlite:///tcc.db")
Base = declarative_base()


class Usuario(Base):
    #id do usuario
    __tablename__='usarios'
    id_usuario = Column(Integer, primary_key=True)
    #nome do usurio
    nome = Column(String(255), nullable=False)
    #email do usuario
    email = Column(String(255), unique=True, nullable=False)
    # senha
    senha = Column(String(255), nullable=False)
    #data do cadastro
    data_cadastro = Column( DateTime, default=DateTime.utcnow)
    #data do nascimento do usuario
    data_de_nascimento = Column(Date)
    #coluna do RG do usuria
    RG=Column(String(20), unique=True, nullable=False)
    #coluna do CPF do usuario
    CPF=Column(String(20), unique=True, nullable=False)
    #genero do usuario, ja limitas as informaçoes colocada para faciliata no prenchimento do cadastro
    genero = Column(Enum(name='OPCOES_DE_GENERO',
                            enums=[
                                "Feminino Cis",
                                "Masculino Cis",
                                "Feminino Trans",
                                "Masculino Trans",
                                "Não-binário",
                                "Outro",
                                "Prefiro não informar"
                                ]), nullable=False)
    #telefone do usuario
    telefone=Column(String(30), unique=True, nullable=False)
    #foto de perfil do usuario
    url_foto_perfil = Column(String(500))
    # Atributos de compliance (Política de Privacidade)
    termos_aceitos = Column(Boolean, default=False)
    data_aceite_termos = Column(DateTime)


    def __init__(self, email, senha, termos_aceitos=False, nome=None, data_de_nascimento=None, RG=None, CPF=None, genero=None, telefone=None, url_foto_perfil=None):
        self.nome = nome
        self.email = email
        self.senha = senha
        self.termos_aceitos = termos_aceitos
        self.data_de_nascimento = data_de_nascimento
        self.RG = RG
        self.CPF = CPF
        self.genero = genero
        self.telefone = telefone
        self.url_foto_perfil = url_foto_perfil
        if termos_aceitos:
            self.data_aceite_termos = DateTime.utcnow()




    # Métodos (Lógica da Aplicação)
    def fazer_login(self, senha_informada):
        # Em um projeto real, você usaria 'bcrypt.checkpw(senha_informada, self.senha)'
        return self.senha == senha_informada # Simulação simples
   
Base.metadata.create.all(engine)



def __init__(self, email, senha, termos_aceitos=False, nome=None, data_de_nascimento=None, RG=None, CPF=None, genero=None, telefone=None, url_foto_perfil=None):
        self.nome = nome
        self.email = email
        self.senha = senha
        self.termos_aceitos = termos_aceitos
        self.data_de_nascimento = data_de_nascimento
        self.RG = RG
        self.CPF = CPF
        self.genero = genero
        self.telefone = telefone
        self.url_foto_perfil = url_foto_perfil
        if termos_aceitos:
            self.data_aceite_termos = DateTime.utcnow()




    # Métodos (Lógica da Aplicação)
    def fazer_login(self, senha_informada):
        # Em um projeto real, você usaria 'bcrypt.checkpw(senha_informada, self.senha)'
        return self.senha == senha_informada # Simulação simples
   
Base.metadata.create.all(engine)
